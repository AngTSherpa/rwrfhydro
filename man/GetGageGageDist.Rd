% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/gage_gage_dist_gridded.R
\name{GetGageGageDist}
\alias{GetGageGageDist}
\title{Get the "distance" between two indices on the network.}
\usage{
GetGageGageDist(ind1, ind2, upstream, downstream, length, gridded = TRUE,
  maxIterDownstream = 100)
}
\description{
If the gages lie up or downstream from one another, then this "symmetric"
distance between them is returned. If the gages are connected by a common
downstream (to both) confulence, requiring a downstream-upstream search, then
the distance from each to the confluence is returned, which is not symmetric.
The output data frame contains:
ind1: if symmetric, the upstream index. If not symmetric, this index's
distance to the confluence is reported.
ind2: if symmetric, the downstream index. If not symmetric, this is just a
place holder.
symmetric: if the points are connected up/downstream from each other or if a
downstream-upstream search is required to connect them.
distance: in meters, as described for ind1 and ind2.
}
\examples{
\dontrun{
 devtools::load_all()

 load('~/ncar/WRF_Hydro/DOMAIN_library/Col_Bldr_Creek/newConnectivity.Rdb')
 length <-
 ncdump('~/ncar/WRF_Hydro/DOMAIN_library/Col_Bldr_Creek/CHANNEL_CONNECTIVITY.nc',
        'CHANLEN', quiet=TRUE)
whPour <- which(downstream$downstream==0)
upstreamSearch <- GatherUpstream(upstream, length, gridded=TRUE,
               10567, indDist=list(ind=c(), dist=c()) )
 #Visualize
map <- VisualizeChanNtwk('~/ncar/WRF_Hydro/DOMAIN_library/Col_Bldr_Creek/200302012300.CHRTOUT_DOMAIN1')
mapOut <- map(zoom=10,click=TRUE)
mapOut$linkDf$dist <- NA
mapOut$linkDf$dist[upstreamSearch$ind] <- upstreamSearch$dist
mapOut$ggplot$layers[[4]] <- NULL
mapOut$ggplot +
  ggplot2::geom_point(data=mapOut$linkDf,
                      aes(x=lon, y=lat, color=dist)) +
  ggplot2::scale_color_gradientn(colours = c('red','orange','yellow','green'))
## output gage-gage distances for Boulder creek above 75th.
## Determine the indices of the gage locations.
frxst <-
  ncdump("~/ncar/WRF_Hydro/DOMAIN_library/Col_Bldr_Creek/Fulldom_hires_netcdf_file.nc",
  'frxst_pts', quiet=TRUE)
frxst <- FlipVert(frxst)
whFrxst2D <- plyr::laply(1:4, function(ww) which(frxst == ww, arr.ind=TRUE))

chanX <-
  ncdump('~/ncar/WRF_Hydro/DOMAIN_library/Col_Bldr_Creek/CHANNEL_CONNECTIVITY.nc',
         'CHANXI', quiet=TRUE)
chanY <-
  ncdump('~/ncar/WRF_Hydro/DOMAIN_library/Col_Bldr_Creek/CHANNEL_CONNECTIVITY.nc',
         'CHANYJ', quiet=TRUE)
whFrxst <- c()
for(ff in 1:nrow(whFrxst2D)) {
  whFrxst <- append(whFrxst, which(chanX==whFrxst2D[ff,1] &
                                   chanY==whFrxst2D[ff,2]))
}
## some rather extensive tests on this...
GetGageGageDist(whFrxst[1], whFrxst[4], upstream, downstream, length)
GetGageGageDist(whFrxst[4], whFrxst[1], upstream, downstream, length)
GetGageGageDist(whFrxst[1], whFrxst[2], upstream, downstream, length)
GetGageGageDist(whFrxst[1], whFrxst[3], upstream, downstream, length)
GetGageGageDist(whFrxst[4], whFrxst[3], upstream, downstream, length)
GetGageGageDist(whFrxst[3], whFrxst[4], upstream, downstream, length)
GetGageGageDist(whFrxst[2], whFrxst[4], upstream, downstream, length)
GetGageGageDist(whFrxst[4], whFrxst[2], upstream, downstream, length)
}
}

