% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/calc_chan_connectivity.R
\name{CalcChanConnect}
\alias{CalcChanConnect}
\title{Calculate the channel connectivity for gridded routing.}
\usage{
CalcChanConnect(hydroGridFile, quiet = FALSE, conFile = TRUE)
}
\arguments{
\item{hydroGridFile}{character, the path/fileName to the "Fulldom" file, aka "the hydro grid file"}

\item{quiet}{Logical Print information about the channel connectivity?}
}
\description{
This is simply an off-line implementation of how the code solves the connectivity from the
hydrogrid file with some reformatting for less repetition.
trunk/NDHMS/Routing/module_HYDRO_io.F : SUBROUTINE READ_ROUTEDIM, v3.0 prerelease line ~574, ~5225
}
\examples{
hydroFile4Mile <- '~/wrfHydroTestCases/Fourmile_Creek/DOMAIN/Fulldom_hydro_OrodellBasin_100m.nc'
conn4Mile0 <- CalcChanConnect(hydroFile4Mile)

connFile4Mile <- '~/wrfHydroTestCases/Fourmile_Creek/CHANNEL_CONNECTIVITY.KS.nc'
connFile4Mile <- '~/CHANNEL_CONNECTIVITY.nc'
conn4Mile <- ReadChanConn(connFile4Mile)
fromTo <- conn4Mile$toNode; names(fromTo) <- conn4Mile$fromNode
toFrom <- conn4Mile$fromNode; names(fromTo) <- conn4Mile$toNode

#Watch the "flows" go up stream from outlet!
chrtFile <- paste0('~/wrfHydroTestCases/Fourmile_Creek/RUN.RTTESTS/OUTPUT_CHRT_DAILY/201308010000.CHRTOUT_DOMAIN1')
Viz4Mile <- VisualizeChanNtwk(chrtFile, plot=FALSE)
chrtGg <- Viz4Mile()


## are there repeated channel nodes???
#hydroFile4Mile <- '~/wrfHydroTestCases/Fourmile_Creek/DOMAIN/Fulldom_hydro_OrodellBasin_100m.nc'
hydroFile4Mile <- '~/WRF_Hydro/Fourmile_test_case_KS_5-29-15/GIS/Fulldom_hires_netcdf_file.nc'
hydroFile4Mile <- '~/Fulldom_hires_netcdf_file.nc'
chLL <- GetNcdfFile(hydroFile4Mile,variables = c("LONGITUDE",'LATITUDE'), quiet=TRUE, flip2D=TRUE)

for(ii in 1:nrow(conn4Mile)) {
 ll <- conn4Mile[ii,1:2]
 whMatch <- which(conn4Mile[,1]==ll[1,1] & conn4Mile[,2]==ll[1,2])
 if( length(whMatch) > 1 ) {
   print('-------------------------------')
   print(ii)
   print(whMatch)
   print(format(conn4Mile[whMatch,], digits=19))
   i <- conn4Mile[whMatch,'chanI']
   j <- conn4Mile[whMatch,'chanJ']
   print(paste('i,j =',i[1],j[1]))
   print(format(chLL$LONGITUDE[i[1],j[1]], digits=19))
   print(format(chLL$LATITUDE[i[1],j[1]], digits=19))
   print(paste('i,j =',i[2],j[2]))
   print(format(chLL$LONGITUDE[i[2],j[2]], digits=19))
   print(format(chLL$LATITUDE[i[2],j[2]], digits=19))
 }
}



toTo=1
cc=1
while(length(toTo)) {
whTf <- c('chLat','chLon','fromNode')
tfSub <- subset(conn4Mile, toNode \%in\% toTo | fromNode \%in\% toTo )[whTf]
tfSub$var <- ifelse(tfSub$fromNode \%in\% toTo, 'to', 'from')
print("---------")
print(cc)
print(format(tfSub, digits=19))
png(file=paste0('~/tmpPngs/fourmile.',formatC(cc,,dig=3,flag='0'),'.png'), width=210*5*2,height=70*5*2, pointsize=3)
print(chrtGg$ggplot + ggplot2::geom_point(data=tfSub, ggplot2::aes(x=chLon, y=chLat, color=var) ))
dev.off()
toTo <- subset(tfSub, var=='from')$fromNode
cc=cc+1
#if(cc==19) break
print(toTo)
#Sys.sleep(2)
}
}

